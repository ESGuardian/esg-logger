input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/logstash/logstash-forwarder.crt"
    ssl_key => "/etc/logstash/logstash-forwarder.key"
  }
}

filter {
    if [beat][hostname] {
        ruby {code => "event['beat']['hostname'] = event['beat']['hostname'].downcase;"}
    }
    if [type] == "wineventlog" {
        if [event_id] == 5447 {drop{}}
        if [event_data][LogonType] {
            ruby { 
                code => "dict = {'0'=>'Системный', '1'=>'Неизвестный', '2'=>'Интерактивный', '3'=>'Сетевой', '4'=>'Пакетный', '5'=>'Как Сервис', '6'=>'Прокси', '7'=>'Снятие блокировки (локально)', '8'=>'Сетевой (открытый текст)', '9'=>'Новая учетная запись', '10'=>'Интерактивный (удаленно)', '11'=>'Интерактивный (из кэша)', '12'=>'Интерактивный (удаленно, из кэша)', '13'=>'Снятие блокировки (из кэша)'}; key = event['event_data']['LogonType']; event['event_data']['LogonType'] = dict[key];"
            }        
        }
    }
    if [type] == "linuxlog" {
        mutate { add_field => {"logtype" => "flood"} } 
        if [source] == "/var/log/auth.log" {
            mutate { gsub => ["logtype","flood","debian_auth"] }
            grok { match => ["message","%{SYSLOGTIMESTAMP:logdate} %{GREEDYDATA}"] }
            date {match => [ "logdate", "MMM dd HH:mm:ss","MMM d HH:mm:ss"]}
        }
        if [source] == "/var/log/dpkg.log" {
            mutate { gsub => ["logtype","flood","debian_dpkg"] }
            grok { match => ["message","%{TIMESTAMP_ISO8601:logdate} %{GREEDYDATA}"] }
            date {match => [ "logdate", "YYYY-MM-dd HH:mm:ss"]}
        }
        if [source] == "/var/log/syslog" {
            mutate { gsub => ["logtype","flood","syslog"] }
            grok { match => ["message","%{SYSLOGTIMESTAMP:logdate} %{GREEDYDATA}"] }
            date {match => [ "logdate", "MMM dd HH:mm:ss","MMM d HH:mm:ss"]}
        }
        if [source] == "/var/log/secure" {
            mutate { gsub => ["logtype","flood","rhel_secure"] }
            grok { match => ["message","%{SYSLOGTIMESTAMP:logdate} %{GREEDYDATA}"] }
            date {match => [ "logdate", "MMM dd HH:mm:ss","MMM d HH:mm:ss"]}
        }
        if [source] == "/var/log/audit/audit.log" {
            mutate { gsub => ["logtype","flood","linux_audit"] }
            grok {match => ["message", "type=%{DATA:audit_type}\smsg=audit\(%{NUMBER:audit_epoch}:%{NUMBER:audit_counter}\):.*?( msg=\'(?<sub_msg>.*?)\')?$" ]}
            kv {exclude_keys => [ "msg", "type" ]}
            kv {source => "sub_msg"}
            date {match => [ "audit_epoch", "UNIX" ]}
            mutate {
                rename => [
                  "auid", "uid_audit",
                  "fsuid", "uid_fs",
                  "suid", "uid_set",
                  "ses", "session_id"
                ]
                remove_field => ['sub_msg', 'audit_epoch']
            }
        }

        
    }
}

output {
    if [type] == "wineventlog" {
        elasticsearch {
             hosts => ["127.0.0.1:9200"]
             index => "winlogbeat-%{+YYYY.MM.dd}"
             document_type => "winlogbeat"
             template => "/etc/logstash/winlogbeat.template-es2x.json"
             template_name => "winlogbeat"
             template_overwrite => true
        }
            
    }
    if [type] == "linuxlog" {
        elasticsearch {
             hosts => ["127.0.0.1:9200"]
             index => "filebeat-%{+YYYY.MM.dd}"
             document_type => "filebeat"
             template => "/etc/logstash/filebeat.template-es2x.json"
             template_name => "filebeat"
             template_overwrite => true
        }
            
    }
}
